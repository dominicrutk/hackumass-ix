{"version":3,"sources":["Map.js","api.js","NavBar.js","Text.js","WaterFountainRow.js","Search.js","App.js","reportWebVitals.js","index.js"],"names":["center","markerOptions","GREEN","fillColor","fillOpacity","stroke","YELLOW","RED","Map","useState","buildings","setBuildings","useEffect","fetch","then","response","json","data","console","log","catch","err","forEach","building","statuses","green","yellow","red","total","waterFountains","fountain","status","radius","Math","min","MapContainer","zoom","scrollWheelZoom","className","TileLayer","attribution","url","map","CircleMarker","latitude","longitude","pathOptions","Popup","name","NavBar","Navbar","fluid","bg","variant","Container","Brand","href","Toggle","Collapse","id","Nav","Link","target","Text","Row","Col","Card","text","Header","Body","width","height","src","WaterFountainRow","props","urgency","location","greens","yellows","reds","wf","Search","process","bldg","i","brokenRating","trunc","length","compare","lh","rh","sort","sortBuildingsByUrgency","Table","striped","bordered","hover","bd","App","document","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e6fe1adb.chunk.js","sourcesContent":["import { MapContainer, TileLayer, CircleMarker, Popup } from 'react-leaflet';\r\nimport './Map.css';\r\nimport { useEffect, useState } from 'react';\r\nimport { getApiUrl } from './api';\r\n\r\nconst lat = 42.390208;\r\nconst long = -72.528271;\r\nconst center = [lat, long];\r\n\r\nconst markerOptions = {\r\n    GREEN: {\r\n        fillColor: 'green',\r\n        fillOpacity: 0.55,\r\n        stroke: false\r\n    },\r\n    YELLOW: {\r\n        fillColor: 'yellow',\r\n        fillOpacity: 0.55,\r\n        stroke: false\r\n    },\r\n    RED: {\r\n        fillColor: 'red',\r\n        fillOpacity: 0.55,\r\n        stroke: false\r\n    }\r\n}\r\n\r\n// Test data, should probably be kept as a property\r\nlet markers = [\r\n    {\r\n        lat: 42.388482,\r\n        long: -72.530341,\r\n        color: 'green',\r\n        text: 'Sycamore'\r\n    }, {\r\n        lat: 42.390208,\r\n        long: -72.528271,\r\n        color: 'yellow',\r\n        text: 'Library'\r\n    }, {\r\n        lat: 42.390929,\r\n        long: -72.525870,\r\n        color: 'red',\r\n        text: 'ILC'\r\n    }\r\n];\r\n\r\nfunction Map() {\r\n    const [buildings, setBuildings] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(`${getApiUrl()}/building`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setBuildings(data)\r\n                console.log(buildings);\r\n            })\r\n            .catch(console.err);\r\n    }, []);\r\n\r\n    buildings.forEach(building => {\r\n        building.statuses = {\r\n            green: 0,\r\n            yellow: 0,\r\n            red: 0,\r\n            total: 0\r\n        }\r\n        building.waterFountains.forEach(fountain => {\r\n            if (fountain.status === \"GREEN\") {\r\n                building.statuses.green++;\r\n            } else if (fountain.status === \"YELLOW\") {\r\n                building.statuses.yellow++;\r\n            } else if (fountain.status === \"RED\") {\r\n                building.statuses.red++;\r\n            }\r\n            building.statuses.total++;\r\n        });\r\n\r\n        if (building.statuses.red >= building.statuses.green && building.statuses.red >= building.statuses.yellow && building.statuses.total !== 0) {\r\n            building.status = \"RED\";\r\n        } else if (building.statuses.yellow >= building.statuses.green) {\r\n            building.status = \"YELLOW\";\r\n        } else {\r\n            building.status = \"GREEN\";\r\n        }\r\n\r\n        building.radius = Math.min(5 * building.statuses.total, 50);\r\n    });\r\n\r\n    return (\r\n        <MapContainer center={center} zoom={15} scrollWheelZoom={true} className=\"Map\">\r\n        <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {buildings.map(building => {\r\n        return (\r\n            <CircleMarker center={[building.latitude, building.longitude]} pathOptions={markerOptions[building.status]} radius={building.radius}>\r\n                <Popup>{building.name}</Popup>\r\n            </CircleMarker>\r\n        );\r\n        })}\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","\r\nexport function getApiUrl() {\r\n  if(process.env.NODE_ENV === \"production\") {\r\n    return \"https://ec2-3-138-61-140.us-east-2.compute.amazonaws.com\";\r\n  }\r\n  return \"http://localhost:8080\";\r\n}","import './NavBar.css';\r\nimport { Container, Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <Navbar fluid bg=\"dark\" variant=\"dark\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">Internet of Utilities (IOU)</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"me-auto\">\r\n            <Nav.Link href=\"https://hackumass.com/\" target=\"_ \">HackUmass</Nav.Link>\r\n            <Nav.Link href=\"https://github.com/dominicrutk/hackumass-ix\" target=\"_ \">GitHub</Nav.Link>\r\n            <Nav.Link href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" target=\"_ \">Documentation</Nav.Link>\r\n            <Nav.Link href=\"https://mlh.io/\" target=\"_ \">Major League Hacking</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import {Card, Col, Container, Row} from 'react-bootstrap';\r\n\r\nconst cards = [{\r\n\r\n}, {\r\n    \r\n}];\r\n\r\nfunction Text() {\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <Card\r\n                      bg={'dark'}\r\n                      text={'white'}\r\n                    >\r\n                    <Card.Header>Description</Card.Header>\r\n                    <Card.Body >\r\n                        <Card.Text>\r\n                        Above a map displays various green, yellow, and red circles. Each circle corresponds to a location \r\n                        where one or more UMass hydration stations are present. The color of the circle corresponds to the \r\n                        average status of the filters at a given location, where a green circle corresponds to a majority of healthy\r\n                        filters, a yellow circle corresponds to a majority of filters nearing the need for replacement, and\r\n                        a red circle indicates a majority of filters need to be replaced. Additionally, the size of the circles \r\n                        corresponds to the number of filters present. Below the map, there is a listing of the\r\n                        locations, the number of filters in each status category, and the estimated urgency associated with\r\n                        replacing filters in that location. Urgency is measured from 0 (meaning no urgency) to 1 (meaning high urgency).\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card\r\n                      bg={'dark'}\r\n                      text={'white'}\r\n                    >\r\n                    <Card.Header>Motivations</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Text>\r\n                        This project aims to improve the lives of all people in the UMass community by improving their access to water. \r\n                        It aims to achieve this by assisting the facilities staff in their task of prioritizing resources. With a limited staff \r\n                        and potentially limited replacement filters, on a near-daily basis facilities managers decide which tasks on campus are of the \r\n                        highest priority and which areas require their attention most when executing those tasks. \r\n                        When it comes to the task of replacing the filters of the hydration\r\n                        stations on campus, due to the number of separate filters, 243 as of last fall, it can be a challenge to\r\n                        determine where there are filters in need of replacement. Further, even with this data, the task of assessing\r\n                        the urgency of replacement in areas based on their usage and the number of filters present can be daunting. This\r\n                        led us to create a user interface that shows a map of the filters, create an algorithm to calculate the estimated\r\n                        urgency for each location, and order those locations in a table based on their urgencies.\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card\r\n                      bg={'dark'}\r\n                      text={'white'}\r\n                    >\r\n                    <Card.Header>Methods</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Text>\r\n                        The hardware in this project involves two components, one component to detect the status of the filter and another to\r\n                        estimate the frequency with which the filters are used. The detection component utilizes a raspberry pi NoIR camera that\r\n                        is connected to a 3D-printed mount for the filter. This sensor continuously checks the status and updates a backend SQL\r\n                        database that feeds into the react frontend user interface. The frequency with which the filters are used is estimated using\r\n                        an ultrasonic distance sensor that tracks the amount of time a stream of water is running. This time is proportional to the\r\n                        volume of water output and thereby serves as an estimate for how often the filter is used. These two components, the status\r\n                        and frequency of use, are factored into our algorithm that ranks the locations and orders them accordingly in the table.\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                \r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Card\r\n                          bg={'dark'}\r\n                      text={'white'}\r\n                       >\r\n                     <Card.Header>Raspberry Pi Setup</Card.Header>\r\n                     <Card.Body>\r\n                            <img width = '100%' height = '100%' src=\"ImageOfFountain.jpg\"></img>\r\n                     </Card.Body>\r\n                     </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card\r\n                      bg={'dark'}\r\n                      text={'white'}\r\n                    >\r\n                    <Card.Header>____</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Text>\r\n                            <img width = '100%' height = '100%' src=\"\"></img>\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card\r\n                      bg={'dark'}\r\n                      text={'white'}\r\n                    >\r\n                    <Card.Header>____</Card.Header>\r\n                    <Card.Body>\r\n                        <img width = '100%' height = '100%' src=\"\"></img>\r\n                    </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Text;","import React from \"react\";\r\n\r\nexport default function WaterFountainRow(props) {\r\n  const building = props.building;\r\n  const data = {\r\n    urgency: building.urgency,\r\n    location: building.name,\r\n    greens: 0,\r\n    yellows: 0,\r\n    reds: 0\r\n  };\r\n\r\n  building.waterFountains.forEach(wf => {\r\n    if(wf.status === \"GREEN\") data.greens++;\r\n    if(wf.status === \"YELLOW\") data.yellows++;\r\n    if(wf.status === \"RED\") data.reds++;\r\n  });\r\n  \r\n  return <tr>\r\n    <td>{data.urgency}</td> \r\n    <td>{data.location}</td>\r\n    <td>{data.greens}</td>\r\n    <td>{data.yellows}</td>\r\n    <td>{data.reds}</td>\r\n  </tr>\r\n}","import Table from 'react-bootstrap/Table';\r\nimport WaterFountainRow from './WaterFountainRow';\r\nimport { useEffect, useState } from 'react';\r\nimport { getApiUrl } from './api';\r\n\r\nfunction Search() {\r\n\r\n    // let buildings = [];\r\n    const [buildings, setBuildings] = useState([]);\r\n\r\n    console.log(process.env);\r\n\r\n    useEffect(() => {\r\n        fetch(`${getApiUrl()}/building`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                sortBuildingsByUrgency(data);\r\n                setBuildings(data)\r\n                console.log(buildings);\r\n            })\r\n            .catch(console.err);\r\n    }, []);\r\n\r\n    function sortBuildingsByUrgency(bldg) {\r\n        for (let i = 0; i < bldg.length; i++) {\r\n            bldg[i].greens = 0;\r\n            bldg[i].yellows = 0;\r\n            bldg[i].reds = 0;\r\n            bldg[i].waterFountains.forEach(wf => {\r\n                if (wf.status === \"GREEN\") bldg[i].greens++;\r\n                if (wf.status === \"YELLOW\") bldg[i].yellows++;\r\n                if (wf.status === \"RED\") bldg[i].reds++;\r\n            });\r\n            const total = bldg[i].greens + bldg[i].yellows + bldg[i].reds;\r\n            const brokenRating = bldg[i].reds + 0.0 * (bldg[i].yellows);\r\n\r\n            bldg[i].urgency = Math.trunc((100 *(brokenRating / total))) / 100;\r\n            \r\n        }\r\n\r\n        function compare(lh, rh) {\r\n            if(lh.urgency > rh.urgency) {\r\n                return -1;\r\n            }\r\n            return 1;\r\n        }\r\n\r\n        bldg.sort(compare);\r\n\r\n\r\n    }\r\n\r\n\r\n    const t = {\r\n        urgency: 1,\r\n        location: \"ILC\",\r\n        greens: 1,\r\n        yellows: 2,\r\n        reds: 3\r\n    }\r\n\r\n    console.log('rendered the search component');\r\n\r\n    return (\r\n        <Table striped bordered hover variant=\"dark\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Urgency</th>\r\n                    <th>Location</th>\r\n                    <th>Greens</th>\r\n                    <th>Yellows</th>\r\n                    <th>Reds</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {buildings.map(bd => <WaterFountainRow building={bd} key={bd.id} />)}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Map from './Map.js';\r\nimport NavBar from './NavBar.js';\r\nimport Text from './Text.js';\r\nimport Search from './Search.js';\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    document.title = 'Internet of Utilities (IOU)';\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar />\r\n      <Map />\r\n      <Search />\r\n      <Text />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}